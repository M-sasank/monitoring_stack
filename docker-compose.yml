services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - monitoring-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - monitoring-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - monitoring-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "4318:4318"    # OTLP HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - ./jaeger-storage:/badger
    networks:
      - monitoring-network

  api-service:
    build: ./api
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
    networks:
      - monitoring-network

  processing-service:
    build: ./processing
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
    networks:
      - monitoring-network

  notification-service:
    build: ./notification
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
    networks:
      - monitoring-network

  analytics-service:
    build: ./analytics
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - JAEGER_ENDPOINT=http://jaeger:4318/v1/traces
    networks:
      - monitoring-network

networks:
  monitoring-network:
    driver: bridge

volumes:
  jaeger-badger:
    driver: local